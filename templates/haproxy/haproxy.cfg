global
{% if log_sidecar %}
    log {{ log_path }} local0
    log /sidecar/log local2
    log /sidecar/log local1 debug
{% else %}
    log 127.0.0.1    local0
    log 127.0.0.1    local1 debug
    log 127.0.0.1    local2
{% endif %}
    log-send-hostname
    daemon
    maxconn 4096
    pidfile /var/run/haproxy.pid

defaults
    log global
    mode tcp
    timeout connect 5s
    timeout client 1m
    timeout server 1m
    option redispatch
    balance roundrobin

{% if stats %}
    stats enable
    stats uri /_hastats
    {% if stats.auth_user and stats.auth_passwd %}
    stats auth {{ stats.auth_user }}:{{ stats.auth_passwd }}
    {% endif %}
{% endif %}

{% if port_groups %}
{% for port_group in port_groups -%}
# Listener group: {{ port_group.name }}
frontend listener_group_{{ port_group.slug }}
    {%- if port_group.protocol == 'http' %}
    bind *:{{ port_group.port }}
    mode http
    {%- elif port_group.protocol == 'https' %}
    bind *:{{ port_group.port }} ssl crt /etc/ssl/crt
    mode http
    reqadd X-Forwarded-Proto:\ https
    {%- endif %}

{% for listener in port_group.listeners -%}
# Listener: {{ listener.name }}
{% for rule in listener.rules %}
    # rule: host: {{ rule.host or 'unset' }}, path: {{ rule.path or 'unset' }}, action: {{ rule.action or 'unset' }}
    {%- if rule.host %}
    acl rule{{ loop.index }}_host hdr_beg(host) -i {{ rule.host }}
    {%- endif %}
    {%- if rule.path %}
    acl rule{{ loop.index }}_path path_beg -i {{ rule.path }}
    {%- endif %}
    {%- if rule.action_type == 'forward' %}
    # Forward request to backend if matching
    use_backend {{ rule.target_group.slug }}_backend if
        {%- if rule.host and rule.path%} rule{{ loop.index }}_host rule{{ loop.index }}_path
        {%- elif rule.host %} rule{{ loop.index }}_host
        {%- elif rule.path %} rule{{ loop.index }}_path{% endif -%}
    {%- elif rule.action_type == 'https' and listener.protocol == 'http' %}
    # Redirect to https
{#    redirect scheme https code 307 if !{ ssl_fc }#}
    use_backend redir_https_backend if
        {%- if rule.host %} rule{{ loop.index }}_host{% endif -%}
        {%- if rule.path %} rule{{ loop.index }}_path{% endif -%}
    {%- endif %}
{% endfor %}

{% endfor %}
    default_backend no_http_service


{% endfor %}

{% for target_group in target_groups %}
{% if target_group.protocol == 'http' -%}
# target group: {{ target_group.identifier }}
backend {{ target_group.identifier|replace(".", "_")|replace("-", "_") }}_backend
    mode http
    {# balance roundrobin #}
    {% with health=target_group.health_check -%}
    {% if health and health.protocol == 'http' -%}
    option httpchk GET {{ health.path }} HTTP/1.0
    http-check expect rstatus ({% for success in health.success %}{% if not loop.first %}|{% endif %}{{ success }}{% endfor %})
    http-check send-state
    timeout check {{ health.timeout }}s
    default-server inter {{ health.interval }}s fall {{ health.unhealthy }} rise {{ health.healthy }}
    {% endif %}
    {% if target_group.identifier.startswith('certbot') %}
    {% else %}
    balance leastconn
    http-request add-header X-Proxied-For {{ target_group.identifier }}
    {% endif %}
    {% for target in target_group.targets %}
    server target_{{ target.hash }} {{ target.host }}:{{ target.port }} {% if health %}check {% if health.port != 'traffic' %}port {{ health.port }}{% endif %}{% endif %}
    {%- endfor %}
    {%- endwith %}
{%- else -%}
# Invalid protocol for target group: {{ target_group.identifier }}
{%- endif %}
{%- endfor %}

{% else %}
# No listeners defined, all request to port 80 results in 503
frontend no_listeners
    bind *:80
    mode http
    default_backend no_http_service
{% endif %}

# Backend which always serves 503
backend no_http_service
    mode http
    errorfile 503 /etc/haproxy/errorfiles/503sorry.http

backend redir_https_backend
    mode http
    redirect scheme https code 307 if !{ ssl_fc }
