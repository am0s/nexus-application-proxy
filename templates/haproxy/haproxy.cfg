global
{% if log_sidecar %}
{#    log {{ log_path }} local0#}
{#    log /sidecar/log local2#}
{#    log /sidecar/log local1 debug#}
{% else %}
    log 127.0.0.1    local0
    log 127.0.0.1    local1 debug
    log 127.0.0.1    local2
{% endif %}
    daemon
    maxconn 4096
    pidfile /var/run/haproxy.pid

defaults
    log global
    mode tcp
    timeout connect 5s
    timeout client 1m
    timeout server 1m
    option redispatch
    balance roundrobin

{% if stats_enabled %}
listen stats :1936
    mode http
    stats enable
    stats hide-version
    #stats realm Haproxy\ Statistics
    stats uri /
    {% if stats_auth_user and stats_auth_passwd %}
    stats auth {{ stats_auth_user }}:{{ stats_auth_passwd }}
    {% endif %}
{% endif %}

{% for listener in listeners -%}
# Listener: {{ listener.name }}
frontend listener_{{ listener.slug }}
    bind *:{{ listener.port }}
    mode http

{% for rule in listener.rules %}
    # rule: host: {{ rule.host or 'unset' }}, path: {{ rule.path or 'unset' }}, action: {{ rule.action or 'unset' }}
    {% if rule.host and rule.path %}
    acl {{ rule.target_group.slug }}_host hdr(host) -i {{ rule.host }}
    acl {{ rule.target_group.slug }}_host path_beg {{ rule.path }}
    {% elif rule.host %}
    acl {{ rule.target_group.slug }}_host hdr(host) -i {{ rule.host }}
    {% elif rule.path %}
    acl {{ rule.target_group.slug }}_host path_beg {{ rule.path }}
    {% endif %}
    use_backend {{ rule.target_group.slug }}_backend if {{ rule.target_group.slug }}_host
{%- endfor %}

{%- endfor %}

    #default_backend web_backend

{% for target_group in target_groups %}
{% if target_group.protocol == 'http' -%}
# target group: {{ target_group.identifier }}
backend {{ target_group.identifier|replace(".", "_")|replace("-", "_") }}_backend
    mode http
    {# balance roundrobin #}
    {% with health=target_group.health_check -%}
    {% if health and health.protocol == 'http' -%}
    option httpchk GET {{ health.path }} HTTP/1.0
    http-check expect rstatus ({% for success in health.success %}{% if not loop.first %}|{% endif %}{{ success }}{% endfor %})
    http-check send-state
    timeout check {{ health.timeout }}s
    default-server inter {{ health.interval }}s fall {{ health.unhealthy }} rise {{ health.healthy }}
    {% endif %}
    balance leastconn
    http-request add-header X-Proxied-For {{ target_group.identifier }}
    {% for target in target_group.targets %}
    server target_{{ target.hash }} {{ target.host }}:{{ target.port }} {% if health %}check {% if health.port != 'traffic' %}port {{ health.port }}{% endif %}{% endif %}
    {%- endfor %}
    {%- endwith %}
{%- else -%}
# Invalid protocol for target group: {{ target_group.identifier }}
{%- endif %}
{%- endfor %}
