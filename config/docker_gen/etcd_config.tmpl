    #!/usr/bin/python

{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "backend" }}
    {{ if .Address }}
        {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
        {{ if and .Container.Node.ID .Address.HostPort }}
            # Node/Container: {{ .Container.Node.Name }}/{{ .Container.Name }}
            {
                "name": "{{ .Container.Node.Name }}/{{ .Container.Name }}",
                "host": "{{ .Container.Node.Address.IP }}",
                "port": {{ .Address.HostPort }},
            },
        {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
        {{ else if .Network }}
            # Container: {{ .Container.Name }}
            {
                "name": "{{ .Container.Name }}",
                "host": "{{ .Network.IP }}",
                "port": {{ .Address.HostPort }},
            },
        {{ end }}
    {{ else if .Network }}
        # Container: {{ .Container.Name }}
        {
            "name": "{{ .Container.Name }}",
            "host": "{{ .Network.IP }}",
            "port": None,
            "down": True,
        },
    {{ end }}
{{ end }}

services = [
{{ range $container := whereLabelExists $ "com.proxy.virtual_host" }}
    {{ $domains := split ($container.Env.VIRTUAL_HOST) "," }}
    {{ $host_group := coalesce ($container.Env.TARGET_GROUP) (first $domains ) }}
    {{ $port_mode := coalesce ($container.Env.VIRTUAL_PORT) "https" }}
    {{ $cert := coalesce ($container.Env.CERTIFICATE) "letsencrypt" }}
    {{ $health_path := coalesce ($container.Env.HEALTHCHECK_PATH) "/" }}
    {{ $health_port := coalesce ($container.Env.HEALTHCHECK_PORT) "traffic" }}
    {{ $health_healthy := coalesce ($container.Env.HEALTHCHECK_HEALTHY) 2 }}
    {{ $health_unhealthy := coalesce ($container.Env.HEALTHCHECK_UNHEALTHY) 10 }}
    {{ $health_timeout := coalesce ($container.Env.HEALTHCHECK_TIMEOUT) 4 }}
    {{ $health_interval := coalesce ($container.Env.HEALTHCHECK_INTERVAL) 5 }}
    {{ $health_success_list := split (coalesce ($container.Env.HEALTHCHECK_SUCCESS) "200") "," }}
    {
        "id": "vhost-{{ $host_group }}",
        "name": "{{ $host_group }}",
        "mode": "vhost",
        "domains": [{{range $domain:= $domains}}"{{ $domain }}", {{end}}],
        "port_mode": "{{ $port_mode }}",
        "cert": "{{ $cert }}",
        "health": {
            "protocol": "http",
            "path": "{{ $health_path }}",
            "port": "{{ $health_port }}",
            "healthy": {{ $health_healthy }},
            "unhealthy": {{ $health_unhealthy }},
            "timeout": {{ $health_timeout }},
            "interval": {{ $health_interval }},
            "success": [{{range $health_success := $health_success_list }}"{{ $health_success }}", {{end}}],
        },
        "targets": [
    {{ $addrLen := len $container.Addresses }}

    {{ range $knownNetwork := $CurrentContainer.Networks }}
        {{ range $containerNetwork := $container.Networks }}
            {{ if eq $knownNetwork.Name $containerNetwork.Name }}
                {{/* If only 1 port exposed, use that */}}
                {{ if eq $addrLen 1 }}
                    {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
                    {{ $address := index $container.Addresses 0 }}
                    {{ template "backend" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
                {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
                {{ else }}
                    {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
                    {{ $address := where $container.Addresses "Port" $port | first }}
                    {{ template "backend" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
                {{ end }}
            {{ end }}
        {{ end }}
    {{ end }}
        ],
    },
{{ end }}
]
